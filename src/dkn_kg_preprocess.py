# -*- coding: utf-8 -*-

# DISCLAIMER
# This code file is forked and adapted from https://github.com/hwwang55/DKN/blob/master/data/kg/kg_preprocess.py

# import libraries
import os
import numpy as np
from pathlib import Path
from typing import Dict, List

# import custom code
from src.config import DKN_KGE_METHOD, DKN_KGE_ENTITY_EMBEDDING_DIM
from src.config import FILENAME_ENTITY2INDEX, FILENAME_ENTITY2ID, FILENAME_TRIPLE2ID
from src.config import DATA_DIR
from src.util.logger import setup_logging


def read_map(file: Path) -> Dict[int, int]:
    entity2index_map = {}
    reader = open(file, encoding='utf-8')
    for line in reader:
        array = line.split('\t')
        if len(array) != 2:  # to skip the first line in entity2id.txt
            continue
        entity_id = array[0]
        index = int(array[1])
        entity2index_map[entity_id] = index
    reader.close()
    return entity2index_map


def get_neighbors_for_entity(file: Path) -> Dict[int, List[int]]:
    reader = open(file, encoding='utf-8')
    entity2neighbor_map = {}
    for line in reader:
        array = line.strip().split('\t')
        if len(array) != 3:  # to skip the first line in triple2id.txt
            continue
        head = int(array[0])
        tail = int(array[1])
        if head in entity2neighbor_map:
            entity2neighbor_map[head].append(tail)
        else:
            entity2neighbor_map[head] = [tail]
        if tail in entity2neighbor_map:
            entity2neighbor_map[tail].append(head)
        else:
            entity2neighbor_map[tail] = [head]
    reader.close()
    return entity2neighbor_map


if __name__ == '__main__':
    logger = setup_logging(name=__file__, log_level='info')

    # entity2index.txt (generated by news_preprocess.py) contains all entities appear in the dataset
    # entity2id.txt (generated by prepare_data_for_transx.py) contains all entities in the crawled knowledge graph
    entity2index = read_map(FILENAME_ENTITY2INDEX)
    full_entity2index = read_map(FILENAME_ENTITY2ID)
    entity2neighbor = get_neighbors_for_entity(FILENAME_TRIPLE2ID)

    full_embeddings = np.loadtxt(os.path.join(DATA_DIR, DKN_KGE_METHOD + '_entity2vec_' + str(DKN_KGE_ENTITY_EMBEDDING_DIM) + '.vec'))
    entity_embeddings = np.zeros([len(entity2index) + 1, DKN_KGE_ENTITY_EMBEDDING_DIM])
    context_embeddings = np.zeros([len(entity2index) + 1, DKN_KGE_ENTITY_EMBEDDING_DIM])

    logger.info('writing entity embeddings...')
    for entity, index in entity2index.items():
        if entity in full_entity2index:
            full_index = full_entity2index[entity]
            entity_embeddings[index] = full_embeddings[full_index]
            if full_index in entity2neighbor:
                context_full_indices = entity2neighbor[full_index]
                context_embeddings[index] = np.average(full_embeddings[context_full_indices], axis=0)

    np.save(os.path.join(DATA_DIR, 'entity_embeddings_' + DKN_KGE_METHOD + '_' + str(DKN_KGE_ENTITY_EMBEDDING_DIM)), entity_embeddings)
    np.save(os.path.join(DATA_DIR, 'context_embeddings_' + DKN_KGE_METHOD + '_' + str(DKN_KGE_ENTITY_EMBEDDING_DIM)), context_embeddings)
